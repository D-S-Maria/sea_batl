from itertools import product
from random import *


# –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class BoardException(Exception):
    pass


class BoardOutException(BoardException):
    def __str__(self):
        return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∑–∞ –¥–æ—Å–∫—É!"


class BoardWrongShipException(BoardException):
    pass


class ErrorEnter(ValueError):
    def __str__(self):
        return '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞'


def game():
    Game()


class Player:
    def __init__(self, b, b_2):
        self.board = b
        self.b_2 = b_2

    def ask(self):
        pass

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.b_2.shot(target)

            except Exception as ex:
                print(ex)
                continue
            return repeat


class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f'–•–æ–¥ AI: {d.x + 1} - {d.y + 1}')
        return d


class User(Player):
    def ask(self):
        while True:
            coord = input('–í–∞—à —Ö–æ–¥: ').split()

            if len(coord) != 2:
                raise ErrorEnter()
            x, y = coord
            x = int(x)
            y = int(y)
            return Dot(x - 1, y - 1)


class Ship:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è Dot(x, y) (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ r –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ ('v') –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ('h')
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π (–∫–ª–µ—Ç–æ–∫) —É –∫–æ—Ä–∞–±–ª—è lf
    Dot:d
    str:r
    int:lf
    """

    def __init__(self, d, r='h', lf=1):
        if r != 'h' and r != 'v':
            raise ErrorEnter
        if r == 'h':
            self.ds = [Dot(i, j) for j in range(d.y, d.y + lf) for i in range(d.x, d.x + 1)]
        else:
            self.ds = [Dot(i, j) for j in range(d.y, d.y + 1) for i in range(d.x, d.x + lf)]
        self.lf = lf
        self.r = r
        self.life = lf

    @property
    def dots(self):
        return self.ds

    def shoot(self, d):
        return d in self.ds

    def __repr__(self):
        return f'–ö–æ—Ä–∞–±–ª—å –¥–ª–∏–Ω—ã {self.lf}, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω {"–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ" if self.r == "v" else "–≥–æ—Ä–∏–∑–æ–Ω–∞—Ç–ª—å–Ω–æ"}'


class Board:
    def __init__(self, hid=False):
        self.pole = [['‚ñ°'] * 6 for _ in range(6)]
        self.ships = []
        self.busy = []
        self.count = 0
        self.hid = hid

    def __repr__(self):
        p = "\n".join(
            ['\t|\t'.join([' '] + [str(i) for i in range(1, 7)])] + ["\t|\t".join([str(n + 1)] + i) for n, i in
                                                                     enumerate(self.pole)])
        return p.replace('‚ñ†', '‚ñ°') if self.hid else p

    def add_ship(self, sh, r=False):
        if any([d in self.busy for d in sh.ds]) or any([self.out(d) for d in sh.ds]):
            if r:
                print('–ù–µ–ª—å–∑—è —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ')
            return False

        for d in sh.ds:
            if not self.hid:
                self.pole[d.x][d.y] = '‚ñ†'
            self.busy.append(d)
        self.contour(sh)
        self.ships.append(sh)
        return True

    def contour(self, sh):
        for d in sh.ds:
            for i, j in product([-1, 0, 1], repeat=2):
                if self.out(Dot(d.x + i, d.y + j)):
                    continue
                if self.pole[d.x + i][d.y + j] not in ['üó∑', '‚ñ†']:
                    if not self.hid:
                        self.pole[d.x + i][d.y + j] = '‚Ä¢'
                    self.busy.append(Dot(d.x + i, d.y + j))

    def clear_contour(self):
        for i in range(6):
            for j in range(6):
                if self.pole[i][j] == '‚Ä¢':
                    self.pole[i][j] = '‚ñ°'

    @staticmethod
    def out(d):
        return not (0 <= d.x < 6 and 0 <= d.y < 6)

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()
        if self.pole[d.x][d.y] in ['üó∑', '‚Ä¢']:
            if self.hid:
                print('–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ –¥–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ö–æ–¥!')

            return True

        for sh in self.ships:
            if sh.shoot(d):
                sh.life -= 1
                self.pole[d.x][d.y] = "üó∑"
                if sh.life:
                    print('–ö–æ—Ä–∞–±–ª—å —Ä–∞–Ω–µ–Ω!')
                    return True
                else:
                    print('–ö–æ—Ä–∞–±–ª—å —É–±–∏—Ç!')
                    self.contour(sh)
                    self.count += 1
                    return True

        else:
            print('–ü—Ä–æ–º–∞—Ö')
            self.pole[d.x][d.y] = '‚Ä¢'
            return False

    def begin(self):
        self.busy = []


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f'–¢–æ—á–∫–∞ {self.x, self.y}'


class Game:
    def __init__(self):
        r = self.random_board()
        if r:
            pl_b = self.try_board(False)
        else:
            pl_b = self.user_board()
        ai_b = self.try_board(True)

        self.player = User(pl_b, ai_b)
        self.ai = AI(ai_b, pl_b)
        self.start()

    @staticmethod
    def user_board():
        sh = [3, 2, 2, 1, 1, 1, 1]
        board = Board(hid=False)
        for i in sh:
            print('–í–∞—à–µ –ø–æ–ª–µ')
            print(board)

            while True:
                try:
                    s = Ship(Dot(int(input('–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏)')) - 1,
                                 int(input('–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞)')) - 1),
                             r=input('–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É h (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ) –∏–ª–∏ v (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)'), lf=i)
                except ValueError as ex:
                    print(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. "{ex}", ')
                    continue
                f = board.add_ship(s, r=True)
                if f:
                    break
        board.clear_contour()
        return board

    def try_board(self, h):
        sh = [3, 2, 2, 1, 1, 1, 1]
        board = Board(hid=h)
        for i in sh:
            tr = 0
            while True:
                tr += 1
                s = Ship(Dot(randint(0, 6), randint(0, 6)), r=choice(['v', 'h']), lf=i)
                f = board.add_ship(s)
                if f:
                    break
                if tr > 2000:
                    break
            if tr > 2000:
                self.try_board(h)
        board.clear_contour()

        return board

    @staticmethod
    def random_board():
        print('–ò–≥—Ä–∞ "–º–æ—Ä—Å–∫–æ–π –±–æ–π" –∏–º–µ–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π\n')
        ans = input('–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π,\n—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ([A]), —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ([B])').upper()
        while ans != 'A' and ans != '–ê' and ans != 'B' and ans != '–í':
            print(
                '–í–≤–µ–¥–∏—Ç–µ [A] –∏–ª–∏ [B]!\n–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π,'
                '\n—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ([A]), —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ([B])')
            ans = input().upper()
        return True if ans == 'B' or ans == '–í' else False

    @staticmethod
    def greet():
        print('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ –∏–≥—Ä–µ "–ú–æ—Ä—Å–∫–æ–π –±–æ–π"!\n–î–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')

    def loop(self):
        num = 0
        while True:
            print('–í–∞—à–µ –ø–æ–ª–µ')
            print(self.player.board)
            print('–ü–æ–ª–µ –≤—Ä–∞–≥–∞')
            print(self.ai.board)
            if num % 2 == 0:
                print('–í–∞—à —Ö–æ–¥')
                x_y = self.player.move()
            else:
                print('–•–æ–¥ AI')
                x_y = self.ai.move()

            if not x_y:
                num += 1
            if self.ai.board.count == len(self.ai.board.ships):
                print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
                break
            if self.player.board.count == len(self.player.board.ships):
                print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª!')
                break

    def start(self):
        self.greet()
        self.loop()


if __name__ == '__main__':
    game()
